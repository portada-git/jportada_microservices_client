package org.elsquatrecaps.portada.jportadamicroservice.client.gui;

import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.elsquatrecaps.portada.jportadamicroservice.client.Configuration;
import org.elsquatrecaps.portada.jportadamicroservice.client.JPortadaMicroservice;

/**
 *
 * @author josep
 */
public class ImageFilesSelector extends javax.swing.JFrame {
    private static String[] fixImagesCommads = {"autocorrect", "fixAll", "deskew", "dewarp","fixBackTransparency"};
    private int iCommandSelection=0;
    private File dirBase=new File(".");

    /**
     * Creates new form ImageFilesSelector
     */
    public ImageFilesSelector() {
        initComponents();
        initMoreComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel14 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        teamComboBoxRequestAccess = new javax.swing.JComboBox<>();
        runRequestPermisionButton = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        emailTextField = new javax.swing.JTextField();
        forceRequestCheckBox = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        commandFixingComboBox = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        dewarpCheckBox = new javax.swing.JCheckBox();
        deskewCheckBox = new javax.swing.JCheckBox();
        fixbacktransCheckBox = new javax.swing.JCheckBox();
        doNotFixLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        inputFixImagesTextField = new javax.swing.JTextField();
        outputFixImagesTextField = new javax.swing.JTextField();
        odForInputFixImagesButton = new javax.swing.JButton();
        odForOutputFixImagesButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        runFixImagesButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        commandFixOrderComboBox = new javax.swing.JComboBox<>();
        jPanel6 = new javax.swing.JPanel();
        runFixOrderButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        inputFixOrderTextField = new javax.swing.JTextField();
        outputFixOrderTextField = new javax.swing.JTextField();
        odForInputFixOrderButton = new javax.swing.JButton();
        odForOutputFixOrderButton = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        teamComboBoxOrder = new javax.swing.JComboBox<>();
        jPanel8 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        inputOcerTextField = new javax.swing.JTextField();
        outputOcrTextField = new javax.swing.JTextField();
        odForInputOcrButton = new javax.swing.JButton();
        odForOutputOcrButton = new javax.swing.JButton();
        AutoDiscardCheckBox = new javax.swing.JCheckBox();
        jLabel20 = new javax.swing.JLabel();
        discardFolderTextField = new javax.swing.JTextField();
        odForDiscardFolder = new javax.swing.JButton();
        useDefaultOcrConfigurationCheckBox = new javax.swing.JCheckBox();
        localConfigOcrLabel = new javax.swing.JLabel();
        localConfigurationOcrTextField = new javax.swing.JTextField();
        odForLocalConfigOcrButton = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        runOcrButton = new javax.swing.JButton();
        teamComboBoxOcr = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        ocrApiComboBox = new javax.swing.JComboBox<>();
        jPanel19 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        teamComboBoxFixOcr = new javax.swing.JComboBox<>();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        textInputFixOcrTextField = new javax.swing.JTextField();
        outputFixOcrTextField = new javax.swing.JTextField();
        odForTextInputFixOcrButton = new javax.swing.JButton();
        odForOutputFixOcrButton = new javax.swing.JButton();
        jLabel26 = new javax.swing.JLabel();
        ImageInputFixOcrTextField = new javax.swing.JTextField();
        odForImageInputFixOcrButton = new javax.swing.JButton();
        runFixOcrButton = new javax.swing.JButton();
        useDefaultFixOcrConfigurationCheckBox = new javax.swing.JCheckBox();
        localConfigFixOcrLabel = new javax.swing.JLabel();
        localConfigurationFixOcrTextField = new javax.swing.JTextField();
        odForLocalConfigFixOcrButton = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        inputExtractDataField = new javax.swing.JTextField();
        outputSelectExtractDataField = new javax.swing.JTextField();
        odForInputExtractDataButton = new javax.swing.JButton();
        odForOutputExtractDataButton = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        runExtractDataButton = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        teamComboBoxExtract = new javax.swing.JComboBox<>();
        jPanel17 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        propertiesFileExtractDataTextField = new javax.swing.JTextField();
        parserConfigFileTextField = new javax.swing.JTextField();
        odForPropertiesFileButton = new javax.swing.JButton();
        odForParserConfigFileButton = new javax.swing.JButton();
        jPanel18 = new javax.swing.JPanel();
        remoteConfigCheckBox = new javax.swing.JCheckBox();
        jLabel17 = new javax.swing.JLabel();
        newsPaperNameExtractDataComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(615, 230));
        setMinimumSize(new java.awt.Dimension(615, 230));
        setName("Images selector"); // NOI18N
        setPreferredSize(new java.awt.Dimension(615, 230));
        setSize(new java.awt.Dimension(615, 203));

        jTabbedPane1.setOpaque(true);

        jLabel13.setFont(new java.awt.Font("Liberation Sans", 0, 24)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("REQUEST ACCESS PERMISSION");

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel13)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jLabel14.setText("     Team (cost center) associated:");
        jLabel14.setToolTipText("Select the team as cost center associated to this permission");

        teamComboBoxRequestAccess.setModel(ImageFilesSelector.createComboboxModelTeamsForSelecting());
        teamComboBoxRequestAccess.setToolTipText("Select the team as cost center associated to this permission");
        teamComboBoxRequestAccess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teamComboBoxRequestAccessActionPerformed(evt);
            }
        });

        runRequestPermisionButton.setText("Request Permission");
        runRequestPermisionButton.setEnabled(false);
        runRequestPermisionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runRequestPermisionButtonActionPerformed(evt);
            }
        });

        jLabel15.setText("     Your e-mail:");

        emailTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailTextFieldActionPerformed(evt);
            }
        });

        forceRequestCheckBox.setText("Force request");

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(emailTextField))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel16Layout.createSequentialGroup()
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(teamComboBoxRequestAccess, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 290, Short.MAX_VALUE)
                        .addComponent(forceRequestCheckBox))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel16Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(runRequestPermisionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(147, Short.MAX_VALUE))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(forceRequestCheckBox)
                    .addComponent(teamComboBoxRequestAccess, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addGap(30, 30, 30)
                .addComponent(runRequestPermisionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("", new javax.swing.ImageIcon(getClass().getResource("/icons8-configuración-50.png")), jPanel14); // NOI18N

        jLabel1.setText("Command:");

        commandFixingComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Automatic fixing", "Fix all", "Deskew", "Dewarp", "Fix Back Transparecy" }));
        commandFixingComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commandFixingComboBoxActionPerformed(evt);
            }
        });

        dewarpCheckBox.setText(" Dewarp");

        deskewCheckBox.setText("Deskew");

        fixbacktransCheckBox.setText("Fix back transparency");

        doNotFixLabel.setText("Do not use:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(dewarpCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deskewCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(fixbacktransCheckBox))
                    .addComponent(doNotFixLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addComponent(doNotFixLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dewarpCheckBox)
                    .addComponent(deskewCheckBox)
                    .addComponent(fixbacktransCheckBox))
                .addGap(28, 28, 28))
        );

        jLabel2.setText("Input:");

        jLabel3.setText("Output:");

        outputFixImagesTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputFixImagesTextFieldActionPerformed(evt);
            }
        });

        odForInputFixImagesButton.setText("Open dialog");
        odForInputFixImagesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odForInputFixImagesButtonActionPerformed(evt);
            }
        });

        odForOutputFixImagesButton.setText("Open dialog");
        odForOutputFixImagesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odForOutputFixImagesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(inputFixImagesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(odForInputFixImagesButton))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(outputFixImagesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(odForOutputFixImagesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(280, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(inputFixImagesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(odForInputFixImagesButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(outputFixImagesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(odForOutputFixImagesButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        runFixImagesButton.setText("Run command");
        runFixImagesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runFixImagesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addComponent(runFixImagesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addComponent(runFixImagesButton)
                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(commandFixingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(commandFixingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Fix images", jPanel3);

        commandFixOrderComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Arcanum", "Yolo paragraphs", "Yolo bocks", "Yolo columns" }));
        commandFixOrderComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commandFixOrderComboBoxActionPerformed(evt);
            }
        });

        runFixOrderButton.setText("Fix order");
        runFixOrderButton.setEnabled(false);
        runFixOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runFixOrderButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addComponent(runFixOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addComponent(runFixOrderButton)
                .addGap(14, 14, 14))
        );

        jLabel4.setText("Layuot algorithm:");

        jLabel5.setText("Input:");

        jLabel6.setText("Output:");

        outputFixOrderTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputFixOrderTextFieldActionPerformed(evt);
            }
        });

        odForInputFixOrderButton.setText("Open dialog");
        odForInputFixOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odForInputFixOrderButtonActionPerformed(evt);
            }
        });

        odForOutputFixOrderButton.setText("Open dialog");
        odForOutputFixOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odForOutputFixOrderButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(29, 29, 29)
                        .addComponent(inputFixOrderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(odForInputFixOrderButton))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(outputFixOrderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(odForOutputFixOrderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(280, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(inputFixOrderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(odForInputFixOrderButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(outputFixOrderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(odForOutputFixOrderButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel12.setText("Team (cost center):");

        teamComboBoxOrder.setModel(createComboboxModelTeamsForSelecting());
        teamComboBoxOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teamComboBoxOrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(commandFixOrderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addGap(18, 18, 18)
                .addComponent(teamComboBoxOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(commandFixOrderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(teamComboBoxOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12)))
                .addGap(18, 18, 18)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(222, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Fix order layout", jPanel5);

        jLabel7.setText("Input:");

        jLabel8.setText("Output:");

        odForInputOcrButton.setText("Open dialog");
        odForInputOcrButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odForInputOcrButtonActionPerformed(evt);
            }
        });

        odForOutputOcrButton.setText("Open dialog");
        odForOutputOcrButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odForOutputOcrButtonActionPerformed(evt);
            }
        });

        AutoDiscardCheckBox.setText("Auto discard?");
        AutoDiscardCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AutoDiscardCheckBoxActionPerformed(evt);
            }
        });

        jLabel20.setText("Discard folder:");

        odForDiscardFolder.setText("Open dialog");
        odForDiscardFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odForDiscardFolderActionPerformed(evt);
            }
        });

        useDefaultOcrConfigurationCheckBox.setSelected(true);
        useDefaultOcrConfigurationCheckBox.setText("Use default configuration");
        useDefaultOcrConfigurationCheckBox.setEnabled(false);
        useDefaultOcrConfigurationCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useDefaultOcrConfigurationCheckBoxActionPerformed(evt);
            }
        });

        localConfigOcrLabel.setText("Local conf.:");
        localConfigOcrLabel.setEnabled(false);

        localConfigurationOcrTextField.setEnabled(false);

        odForLocalConfigOcrButton.setText("Open dialog");
        odForLocalConfigOcrButton.setEnabled(false);
        odForLocalConfigOcrButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odForLocalConfigOcrButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(inputOcerTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 668, Short.MAX_VALUE))
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel10Layout.createSequentialGroup()
                                        .addComponent(useDefaultOcrConfigurationCheckBox)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(localConfigurationOcrTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(2, 2, 2))
                                    .addGroup(jPanel10Layout.createSequentialGroup()
                                        .addComponent(AutoDiscardCheckBox)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel20)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(discardFolderTextField))
                                    .addGroup(jPanel10Layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addGap(18, 18, 18)
                                        .addComponent(outputOcrTextField)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(localConfigOcrLabel)
                        .addGap(247, 247, 247)))
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(odForLocalConfigOcrButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(odForOutputOcrButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(odForInputOcrButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(odForDiscardFolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(16, 16, 16))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(inputOcerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(odForInputOcrButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(outputOcrTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(odForOutputOcrButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(AutoDiscardCheckBox)
                        .addComponent(jLabel20)
                        .addComponent(discardFolderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(odForDiscardFolder))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(localConfigOcrLabel)
                        .addComponent(localConfigurationOcrTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(odForLocalConfigOcrButton))
                    .addComponent(useDefaultOcrConfigurationCheckBox))
                .addContainerGap(154, Short.MAX_VALUE))
        );

        runOcrButton.setText("Run OCR");
        runOcrButton.setEnabled(false);
        runOcrButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runOcrButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(runOcrButton, javax.swing.GroupLayout.DEFAULT_SIZE, 787, Short.MAX_VALUE)
                .addGap(50, 50, 50))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(runOcrButton)
                .addContainerGap())
        );

        teamComboBoxOcr.setModel(createComboboxModelTeamsForSelecting());
        teamComboBoxOcr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teamComboBoxOcrActionPerformed(evt);
            }
        });

        jLabel11.setText("Team (cost center):");

        jLabel21.setText("Use Api:");

        ocrApiComboBox.setModel(createComboboxModelOcrApi());
        ocrApiComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ocrApiComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel21)
                        .addGap(18, 18, 18)
                        .addComponent(ocrApiComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67)
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(teamComboBoxOcr, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67))
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(teamComboBoxOcr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel21)
                    .addComponent(ocrApiComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        jTabbedPane1.addTab("Ocr process", jPanel8);

        jLabel22.setText("Team (cost center):");

        teamComboBoxFixOcr.setModel(createComboboxModelTeamsForSelecting());
        teamComboBoxFixOcr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teamComboBoxFixOcrActionPerformed(evt);
            }
        });

        jLabel23.setText("Text input:");

        jLabel24.setText("Output:");

        odForTextInputFixOcrButton.setText("Open dialog");
        odForTextInputFixOcrButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odForTextInputFixOcrButtonActionPerformed(evt);
            }
        });

        odForOutputFixOcrButton.setText("Open dialog");
        odForOutputFixOcrButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odForOutputFixOcrButtonActionPerformed(evt);
            }
        });

        jLabel26.setText("Images Input:");

        odForImageInputFixOcrButton.setText("Open dialog");
        odForImageInputFixOcrButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odForImageInputFixOcrButtonActionPerformed(evt);
            }
        });

        runFixOcrButton.setText("Run OCR");
        runFixOcrButton.setEnabled(false);
        runFixOcrButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runFixOcrButtonActionPerformed(evt);
            }
        });

        useDefaultFixOcrConfigurationCheckBox.setSelected(true);
        useDefaultFixOcrConfigurationCheckBox.setText("Use default configuration");
        useDefaultFixOcrConfigurationCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useDefaultFixOcrConfigurationCheckBoxActionPerformed(evt);
            }
        });

        localConfigFixOcrLabel.setText("Local conf.:");
        localConfigFixOcrLabel.setEnabled(false);

        localConfigurationFixOcrTextField.setEnabled(false);

        odForLocalConfigFixOcrButton.setText("Open dialog");
        odForLocalConfigFixOcrButton.setEnabled(false);
        odForLocalConfigFixOcrButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odForLocalConfigFixOcrButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel19Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(teamComboBoxFixOcr, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel19Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel19Layout.createSequentialGroup()
                                .addComponent(useDefaultFixOcrConfigurationCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(localConfigFixOcrLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(localConfigurationFixOcrTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(odForLocalConfigFixOcrButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel19Layout.createSequentialGroup()
                                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel23)
                                    .addComponent(jLabel26)
                                    .addComponent(jLabel24))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel19Layout.createSequentialGroup()
                                        .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(textInputFixOcrTextField)
                                            .addComponent(outputFixOcrTextField)
                                            .addComponent(runFixOcrButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 673, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(odForOutputFixOcrButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(odForTextInputFixOcrButton)))
                                    .addGroup(jPanel19Layout.createSequentialGroup()
                                        .addComponent(ImageInputFixOcrTextField)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(odForImageInputFixOcrButton)))))))
                .addContainerGap())
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(teamComboBoxFixOcr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(textInputFixOcrTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(odForTextInputFixOcrButton))
                .addGap(18, 18, 18)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(ImageInputFixOcrTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(odForImageInputFixOcrButton))
                .addGap(19, 19, 19)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(outputFixOcrTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(odForOutputFixOcrButton))
                .addGap(18, 18, 18)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(localConfigFixOcrLabel)
                        .addComponent(localConfigurationFixOcrTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(odForLocalConfigFixOcrButton))
                    .addComponent(useDefaultFixOcrConfigurationCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 153, Short.MAX_VALUE)
                .addComponent(runFixOcrButton)
                .addGap(42, 42, 42))
        );

        jTabbedPane1.addTab("Fix OCR with AI", jPanel19);

        jLabel9.setText("Input:");

        jLabel10.setText("Output:");

        odForInputExtractDataButton.setText("Open dialog");
        odForInputExtractDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odForInputExtractDataButtonActionPerformed(evt);
            }
        });

        odForOutputExtractDataButton.setText("Open dialog");
        odForOutputExtractDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odForOutputExtractDataButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(inputExtractDataField))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(outputSelectExtractDataField, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)))
                .addGap(12, 12, 12)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(odForInputExtractDataButton)
                    .addComponent(odForOutputExtractDataButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(inputExtractDataField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(odForInputExtractDataButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(outputSelectExtractDataField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(odForOutputExtractDataButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        runExtractDataButton.setText("Extract data");
        runExtractDataButton.setEnabled(false);
        runExtractDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runExtractDataButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(runExtractDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(runExtractDataButton)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jLabel16.setText("Team (cost center):");

        teamComboBoxExtract.setModel(createComboboxModelTeamsForSelecting());
        teamComboBoxExtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teamComboBoxExtractActionPerformed(evt);
            }
        });

        jPanel17.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel18.setText("Properties file:");

        jLabel19.setText("Extract parser config file:");

        odForPropertiesFileButton.setFont(new java.awt.Font("Liberation Sans", 0, 8)); // NOI18N
        odForPropertiesFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-search-file-18.png"))); // NOI18N
        odForPropertiesFileButton.setToolTipText("Open dialog");
        odForPropertiesFileButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        odForPropertiesFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odForPropertiesFileButtonActionPerformed(evt);
            }
        });

        odForParserConfigFileButton.setFont(new java.awt.Font("Liberation Sans", 0, 8)); // NOI18N
        odForParserConfigFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-search-file-18.png"))); // NOI18N
        odForParserConfigFileButton.setToolTipText("Open dialog");
        odForParserConfigFileButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        odForParserConfigFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odForParserConfigFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(propertiesFileExtractDataTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(odForPropertiesFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel17Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(parserConfigFileTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(odForParserConfigFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(propertiesFileExtractDataTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(odForPropertiesFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(odForParserConfigFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel19)
                        .addComponent(parserConfigFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel18.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        remoteConfigCheckBox.setText("User remote config");
        remoteConfigCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remoteConfigCheckBoxActionPerformed(evt);
            }
        });

        jLabel17.setText("Newspaper name:");

        newsPaperNameExtractDataComboBox.setEditable(true);
        newsPaperNameExtractDataComboBox.setModel(createComboboxModelNewsPaperForSelecting());
        newsPaperNameExtractDataComboBox.setEnabled(false);

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newsPaperNameExtractDataComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(remoteConfigCheckBox)
                            .addComponent(jLabel17))
                        .addGap(0, 6, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(remoteConfigCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newsPaperNameExtractDataComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addGap(18, 18, 18)
                                .addComponent(teamComboBoxExtract, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel9Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(5, 5, 5))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                        .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(teamComboBoxExtract, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Extract data", jPanel9);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void odForOutputOcrButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odForOutputOcrButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser(dirBase.getAbsoluteFile());
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setCurrentDirectory(dirBase.getAbsoluteFile());
        int resp = fc.showOpenDialog(this);
        if(resp!=JFileChooser.CANCEL_OPTION){
            dirBase = fc.getSelectedFile().getParentFile();
            outputOcrTextField.setText(fc.getSelectedFile().getAbsolutePath());
            inputExtractDataField.setText(outputOcrTextField.getText());
        }
//        updateComponenets();
        
    }//GEN-LAST:event_odForOutputOcrButtonActionPerformed

    private void odForInputOcrButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odForInputOcrButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser(dirBase.getAbsolutePath());
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setCurrentDirectory(dirBase.getAbsoluteFile());
        int resp = fc.showOpenDialog(this);
        if(resp!=JFileChooser.CANCEL_OPTION){
            dirBase = fc.getSelectedFile().getParentFile();
            inputOcerTextField.setText(fc.getSelectedFile().getAbsolutePath());
        }
//        updateComponenets();
        
    }//GEN-LAST:event_odForInputOcrButtonActionPerformed

    private void odForOutputFixOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odForOutputFixOrderButtonActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser(dirBase.getAbsoluteFile());
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setCurrentDirectory(dirBase.getAbsoluteFile());
        int resp = fc.showOpenDialog(this);
        if(resp!=JFileChooser.CANCEL_OPTION){
            dirBase = fc.getSelectedFile().getParentFile();
            outputFixOrderTextField.setText(fc.getSelectedFile().getAbsolutePath());
            inputOcerTextField.setText(outputFixOrderTextField.getText());
            inputExtractDataField.setText(outputFixOrderTextField.getText());
        }        
    }//GEN-LAST:event_odForOutputFixOrderButtonActionPerformed

    private void odForInputFixOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odForInputFixOrderButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser(dirBase.getAbsolutePath());
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setCurrentDirectory(dirBase.getAbsoluteFile());
        int resp = fc.showOpenDialog(this);
        if(resp!=JFileChooser.CANCEL_OPTION){
            dirBase = fc.getSelectedFile().getParentFile();
            inputFixOrderTextField.setText(fc.getSelectedFile().getAbsolutePath());
        }        
    }//GEN-LAST:event_odForInputFixOrderButtonActionPerformed

    private void odForOutputFixImagesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odForOutputFixImagesButtonActionPerformed
        JFileChooser fc = new JFileChooser(dirBase.getAbsoluteFile());
        if(iCommandSelection<=1){
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        }else{
            fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
            fc.addChoosableFileFilter(new FileNameExtensionFilter("jpeg","jpg", "png", "gif", "tiff", "tif"));
        }
        fc.setCurrentDirectory(dirBase.getAbsoluteFile());
        int resp = fc.showOpenDialog(this);
        if(resp!=JFileChooser.CANCEL_OPTION){
            dirBase = fc.getSelectedFile().getParentFile();
            outputFixImagesTextField.setText(fc.getSelectedFile().getAbsolutePath());
            inputOcerTextField.setText(outputFixImagesTextField.getText());
            inputFixOrderTextField.setText(outputFixImagesTextField.getText());
            inputExtractDataField.setText(outputFixImagesTextField.getText());
        }
    }//GEN-LAST:event_odForOutputFixImagesButtonActionPerformed

    private void odForInputFixImagesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odForInputFixImagesButtonActionPerformed
        JFileChooser fc = new JFileChooser(dirBase.getAbsolutePath());
        if(iCommandSelection<=1){
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        }else{
            fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
            fc.setFileFilter(new FileNameExtensionFilter("Image files","jpeg","jpg", "png", "gif", "tiff", "tif"));
        }
        fc.setCurrentDirectory(dirBase.getAbsoluteFile());
        int resp = fc.showOpenDialog(this);
        if(resp!=JFileChooser.CANCEL_OPTION){
            dirBase = fc.getSelectedFile().getParentFile();
            inputFixImagesTextField.setText(fc.getSelectedFile().getAbsolutePath());
        }
//        updateComponenets();
    }//GEN-LAST:event_odForInputFixImagesButtonActionPerformed

    private void commandFixingComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commandFixingComboBoxActionPerformed
        iCommandSelection = commandFixingComboBox.getSelectedIndex();
        if(iCommandSelection<=1){
            inputFixImagesTextField.setText("");
            outputFixImagesTextField.setText("");
        }
        updateComponenetsFirst();
    }//GEN-LAST:event_commandFixingComboBoxActionPerformed

    private void odForInputExtractDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odForInputExtractDataButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser(dirBase.getAbsolutePath());
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setCurrentDirectory(dirBase.getAbsoluteFile());
        int resp = fc.showOpenDialog(this);
        if(resp!=JFileChooser.CANCEL_OPTION){
            dirBase = fc.getSelectedFile().getParentFile();
            inputExtractDataField.setText(fc.getSelectedFile().getAbsolutePath());
        }
//        updateComponenets();
        
    }//GEN-LAST:event_odForInputExtractDataButtonActionPerformed

    private void odForOutputExtractDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odForOutputExtractDataButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser(dirBase.getAbsolutePath());
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        fc.setFileFilter(new FileNameExtensionFilter("Files for data", "csv", "json"));
        fc.setCurrentDirectory(dirBase.getAbsoluteFile());
        int resp = fc.showOpenDialog(this);
        if(resp!=JFileChooser.CANCEL_OPTION){
            if(fc.getSelectedFile().isDirectory()){
                dirBase = fc.getSelectedFile();
                outputSelectExtractDataField.setText(fc.getSelectedFile().getAbsolutePath().concat("/results"));                 
            }else{
                dirBase = fc.getSelectedFile().getParentFile();
                outputSelectExtractDataField.setText(fc.getSelectedFile().getAbsolutePath());
            }            
        }        
    }//GEN-LAST:event_odForOutputExtractDataButtonActionPerformed

    private void runFixImagesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runFixImagesButtonActionPerformed
        // TODO add your handling code here:
        Configuration config = new Configuration();
        PortadaWorker worker = new PortadaWorker();
        List<String> options = new ArrayList<>();
        options.add(fixImagesCommads[this.commandFixingComboBox.getSelectedIndex()]);
        options.add("-i");
        options.add(this.inputFixImagesTextField.getText());
        options.add("-o");
        options.add(this.outputFixImagesTextField.getText());
        if(this.deskewCheckBox.isSelected()){
            options.add("-s");
        }
        if(this.dewarpCheckBox.isSelected()){
            options.add("-w");
        }
        if(this.fixbacktransCheckBox.isSelected()){
            options.add("-t");
        }
        String[] par = new String[options.size()];
        config.parseArgumentsAndConfigure(options.toArray( par));
        worker.init(config);
        worker.execute();
    }//GEN-LAST:event_runFixImagesButtonActionPerformed

    private void outputFixImagesTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputFixImagesTextFieldActionPerformed
        this.inputFixOrderTextField.setText(this.outputFixImagesTextField.getText());
        this.inputOcerTextField.setText(this.outputFixImagesTextField.getText());
        this.inputExtractDataField.setText(this.outputFixImagesTextField.getText());        
    }//GEN-LAST:event_outputFixImagesTextFieldActionPerformed

    private void outputFixOrderTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputFixOrderTextFieldActionPerformed
        // TODO add your handling code here:
        this.inputOcerTextField.setText(this.outputFixImagesTextField.getText());
        this.inputExtractDataField.setText(this.outputFixImagesTextField.getText());                
    }//GEN-LAST:event_outputFixOrderTextFieldActionPerformed

    private void runOcrButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runOcrButtonActionPerformed
        // TODO add your handling code here:
        Configuration config = new Configuration();
        PortadaWorker worker = new PortadaWorker();
        List<String> options = new ArrayList<>();
        options.add("ocrAll_".concat(((ComboBoxItem)(this.ocrApiComboBox.getSelectedItem())).getId()));
        options.add("-i");
        options.add(this.inputOcerTextField.getText());
        options.add("-o");
        options.add(this.outputOcrTextField.getText());
        if(this.AutoDiscardCheckBox.isSelected()){
            options.add("-ad");
            options.add("-df");
            options.add(this.discardFolderTextField.getText());
        }
        if(!this.useDefaultOcrConfigurationCheckBox.isSelected()){
            options.add("-cfg");
            options.add(this.localConfigurationFixOcrTextField.getText());            
        }
        options.add("-tm");
        options.add(this.teamComboBoxOcr.getSelectedItem().toString().toLowerCase());
        String[] par = new String[options.size()];
        config.parseArgumentsAndConfigure(options.toArray( par));
        worker.init(config);
        worker.execute();        
    }//GEN-LAST:event_runOcrButtonActionPerformed

    private void teamComboBoxOcrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamComboBoxOcrActionPerformed
        // TODO add your handling code here:
        if(this.teamComboBoxOcr.getSelectedItem().toString().equals("NONE")){
            this.runOcrButton.setEnabled(false);
        }else{
            this.runOcrButton.setEnabled(true);
        }
    }//GEN-LAST:event_teamComboBoxOcrActionPerformed

    private void runFixOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runFixOrderButtonActionPerformed
        // TODO add your handling code here:
        String[] comands = {"reorderAll", "toParagraphsAll", "toBlocksAll", "toColumnsAll"};
        Configuration config = new Configuration();
        PortadaWorker worker = new PortadaWorker();
        List<String> options = new ArrayList<>();        
        options.add(comands[this.commandFixOrderComboBox.getSelectedIndex()]);
        options.add("-i");
        options.add(this.inputFixOrderTextField.getText());
        options.add("-o");
        options.add(this.outputFixOrderTextField.getText());
        options.add("-tm");
        options.add(this.teamComboBoxOrder.getSelectedItem().toString().toLowerCase());
        String[] par = new String[options.size()];
        config.parseArgumentsAndConfigure(options.toArray( par));
        worker.init(config);
        worker.execute();        
        
    }//GEN-LAST:event_runFixOrderButtonActionPerformed

    private void teamComboBoxOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamComboBoxOrderActionPerformed
        // TODO add your handling code here:
       this.updateFixOrderStates();
    }//GEN-LAST:event_teamComboBoxOrderActionPerformed

    private void teamComboBoxRequestAccessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamComboBoxRequestAccessActionPerformed
        // TODO add your handling code here:
        updateRunRequestPermission();
    }//GEN-LAST:event_teamComboBoxRequestAccessActionPerformed

    private void runRequestPermisionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runRequestPermisionButtonActionPerformed
        // TODO add your handling code here:
        final PortadaWorker worker = new PortadaWorker(null);
        VerifyCodeAccessFrame diag = new VerifyCodeAccessFrame();                
        diag.init((butonId) -> {
            if(butonId == VerifyCodeAccessFrame.ACCEPT_BUTON){
                Configuration config = new Configuration();
                List<String> options = new ArrayList<>();
                options.add("verifyCode");
                options.add("-tm");
                options.add(this.teamComboBoxRequestAccess.getSelectedItem().toString().toLowerCase());
                options.add("-m");
                options.add(this.emailTextField.getText());
                options.add("-c");
                options.add(diag.getVerificationCode());
                String[] par = new String[options.size()];
                config.parseArgumentsAndConfigure(options.toArray( par));
                JPortadaMicroservice.execute(config, worker.papìInstance);
            }else{
                diag.setVisible(false);
            }
            return null;
        });
        
        List<String> options = new ArrayList<>();
        Configuration config = new Configuration();
        options.add("requestAccess");
        options.add("-tm");
        options.add(this.teamComboBoxRequestAccess.getSelectedItem().toString().toLowerCase());
        options.add("-m");
        options.add(this.emailTextField.getText());
        if(this.forceRequestCheckBox.isSelected()){
            options.add("-f");
        }
        String[] par = new String[options.size()];
        config.parseArgumentsAndConfigure(options.toArray( par));
        worker.init(config, diag);
        worker.execute();
        
    }//GEN-LAST:event_runRequestPermisionButtonActionPerformed

    private void emailTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailTextFieldActionPerformed
        // TODO add your handling code here:
        updateRunRequestPermission();
    }//GEN-LAST:event_emailTextFieldActionPerformed

    private void teamComboBoxExtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamComboBoxExtractActionPerformed
        // TODO add your handling code here:
        if(this.teamComboBoxExtract.getSelectedItem().toString().equals("NONE")){
            this.runExtractDataButton.setEnabled(false);
        }else{
            this.runExtractDataButton.setEnabled(true);
        }        
    }//GEN-LAST:event_teamComboBoxExtractActionPerformed

    private void remoteConfigCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remoteConfigCheckBoxActionPerformed
        // TODO add your handling code here:
        this.newsPaperNameExtractDataComboBox.setEditable(remoteConfigCheckBox.isSelected());
        this.newsPaperNameExtractDataComboBox.setEnabled(remoteConfigCheckBox.isSelected());
        this.propertiesFileExtractDataTextField.setEditable(!remoteConfigCheckBox.isSelected());
        this.propertiesFileExtractDataTextField.setEnabled(!remoteConfigCheckBox.isSelected());
        this.odForPropertiesFileButton.setEnabled(!remoteConfigCheckBox.isSelected());
    }//GEN-LAST:event_remoteConfigCheckBoxActionPerformed

    private void runExtractDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runExtractDataButtonActionPerformed
        // TODO add your handling code here:
        Configuration config = new Configuration();
        PortadaWorker worker = new PortadaWorker();
        List<String> options = new ArrayList<>();
        options.add("extract");
        options.add("-i");
        options.add(this.inputExtractDataField.getText());
        options.add("-o");
        options.add(this.outputSelectExtractDataField.getText());
        options.add("-tm");
        options.add(this.teamComboBoxExtract.getSelectedItem().toString().toLowerCase());
        if(this.remoteConfigCheckBox.isSelected()){
            options.add("--extractConfigMode");
            options.add("R");
            options.add("--extractConfigProtertiesFile");
            options.add(((ComboBoxItem)this.newsPaperNameExtractDataComboBox.getSelectedItem()).getId());
            if(!this.parserConfigFileTextField.getText().isBlank()){
                options.add("--extractJsonConfigParsersFile");
                options.add(this.parserConfigFileTextField.getText());
            }
        }else{
            options.add("--extractConfigMode");
            options.add("L");
            options.add("--extractConfigProtertiesFile");
            options.add(this.propertiesFileExtractDataTextField.getText());
            if(!this.parserConfigFileTextField.getText().isBlank()){
                options.add("--extractJsonConfigParsersFile");
                options.add(this.parserConfigFileTextField.getText());
            }
        }
        String[] par = new String[options.size()];
        config.parseArgumentsAndConfigure(options.toArray( par));
        worker.init(config);
        worker.execute();        
        
    }//GEN-LAST:event_runExtractDataButtonActionPerformed

    private void odForParserConfigFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odForParserConfigFileButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser(dirBase.getAbsolutePath());
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setCurrentDirectory(dirBase.getAbsoluteFile());
        fc.setFileFilter(new FileNameExtensionFilter("Config of parsers", "json"));
        int resp = fc.showOpenDialog(this);
        if(resp!=JFileChooser.CANCEL_OPTION){
            this.parserConfigFileTextField.setText(fc.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_odForParserConfigFileButtonActionPerformed

    private void odForPropertiesFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odForPropertiesFileButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser(dirBase.getAbsolutePath());
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setCurrentDirectory(dirBase.getAbsoluteFile());
        fc.setFileFilter(new FileNameExtensionFilter("Config of extraction", "properties"));
        int resp = fc.showOpenDialog(this);
        if(resp!=JFileChooser.CANCEL_OPTION){
            this.propertiesFileExtractDataTextField.setText(fc.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_odForPropertiesFileButtonActionPerformed

    private void odForDiscardFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odForDiscardFolderActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser(dirBase.getAbsoluteFile());
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setCurrentDirectory(dirBase.getAbsoluteFile());
        int resp = fc.showOpenDialog(this);
        if(resp!=JFileChooser.CANCEL_OPTION){
            discardFolderTextField.setText(fc.getSelectedFile().getAbsolutePath());
        }        
    }//GEN-LAST:event_odForDiscardFolderActionPerformed

    private void AutoDiscardCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AutoDiscardCheckBoxActionPerformed
        // TODO add your handling code here:
        if(this.AutoDiscardCheckBox.isSelected()){
            this.discardFolderTextField.setEnabled(true);
        }else{
            this.discardFolderTextField.setText("");
            this.discardFolderTextField.setEnabled(false);
        }
    }//GEN-LAST:event_AutoDiscardCheckBoxActionPerformed

    private void commandFixOrderComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commandFixOrderComboBoxActionPerformed
        this.updateFixOrderStates();
    }//GEN-LAST:event_commandFixOrderComboBoxActionPerformed

    private void odForTextInputFixOcrButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odForTextInputFixOcrButtonActionPerformed
        JFileChooser fc = new JFileChooser(dirBase.getAbsolutePath());
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setCurrentDirectory(dirBase.getAbsoluteFile());
        int resp = fc.showOpenDialog(this);
        if(resp!=JFileChooser.CANCEL_OPTION){
            dirBase = fc.getSelectedFile().getParentFile();
            textInputFixOcrTextField.setText(fc.getSelectedFile().getAbsolutePath());
        }        
    }//GEN-LAST:event_odForTextInputFixOcrButtonActionPerformed

    private void odForOutputFixOcrButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odForOutputFixOcrButtonActionPerformed
        JFileChooser fc = new JFileChooser(dirBase.getAbsolutePath());
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setCurrentDirectory(dirBase.getAbsoluteFile());
        int resp = fc.showOpenDialog(this);
        if(resp!=JFileChooser.CANCEL_OPTION){
            dirBase = fc.getSelectedFile().getParentFile();
            outputFixOcrTextField.setText(fc.getSelectedFile().getAbsolutePath());
        }  
    }//GEN-LAST:event_odForOutputFixOcrButtonActionPerformed

    private void odForImageInputFixOcrButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odForImageInputFixOcrButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser(dirBase.getAbsolutePath());
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setCurrentDirectory(dirBase.getAbsoluteFile());
        int resp = fc.showOpenDialog(this);
        if(resp!=JFileChooser.CANCEL_OPTION){
            dirBase = fc.getSelectedFile().getParentFile();
            ImageInputFixOcrTextField.setText(fc.getSelectedFile().getAbsolutePath());
        }          
    }//GEN-LAST:event_odForImageInputFixOcrButtonActionPerformed

    private void runFixOcrButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runFixOcrButtonActionPerformed
        Configuration config = new Configuration();
        PortadaWorker worker = new PortadaWorker();
        List<String> options = new ArrayList<>();
        options.add("fixOcrAll");
        options.add("-i");
        options.add(this.textInputFixOcrTextField.getText());
        options.add("-ei");
        options.add(this.ImageInputFixOcrTextField.getText());
        if(!this.useDefaultFixOcrConfigurationCheckBox.isSelected()){
            options.add("-cfg");
            options.add(this.localConfigurationFixOcrTextField.getText());            
        }
        options.add("-o");
        options.add(this.outputFixOcrTextField.getText());
        options.add("-tm");
        options.add(this.teamComboBoxFixOcr.getSelectedItem().toString().toLowerCase());
        String[] par = new String[options.size()];
        config.parseArgumentsAndConfigure(options.toArray( par));
        worker.init(config);
        worker.execute();             
    }//GEN-LAST:event_runFixOcrButtonActionPerformed

    private void odForLocalConfigFixOcrButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odForLocalConfigFixOcrButtonActionPerformed
        JFileChooser fc = new JFileChooser(dirBase.getAbsolutePath());
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setCurrentDirectory(dirBase.getAbsoluteFile());
        fc.setFileFilter(new FileNameExtensionFilter("json files", "json"));
        int resp = fc.showOpenDialog(this);
        if(resp!=JFileChooser.CANCEL_OPTION){
            dirBase = fc.getSelectedFile().getParentFile();
            localConfigurationFixOcrTextField.setText(fc.getSelectedFile().getAbsolutePath());
        }  
    }//GEN-LAST:event_odForLocalConfigFixOcrButtonActionPerformed

    private void useDefaultFixOcrConfigurationCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useDefaultFixOcrConfigurationCheckBoxActionPerformed
        this.localConfigurationFixOcrTextField.setEnabled(!this.useDefaultFixOcrConfigurationCheckBox.isSelected());
        this.odForLocalConfigFixOcrButton.setEnabled(!this.useDefaultFixOcrConfigurationCheckBox.isSelected());
        this.localConfigFixOcrLabel.setEnabled(!this.useDefaultFixOcrConfigurationCheckBox.isSelected());
    }//GEN-LAST:event_useDefaultFixOcrConfigurationCheckBoxActionPerformed

    private void teamComboBoxFixOcrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamComboBoxFixOcrActionPerformed
        // TODO add your handling code here:
        if(this.teamComboBoxFixOcr.getSelectedItem().toString().equals("NONE")){
            this.runFixOcrButton.setEnabled(false);
        }else{
            this.runFixOcrButton.setEnabled(true);
        }        
    }//GEN-LAST:event_teamComboBoxFixOcrActionPerformed

    private void useDefaultOcrConfigurationCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useDefaultOcrConfigurationCheckBoxActionPerformed
        // TODO add your handling code here:
        this.localConfigOcrLabel.setEnabled(!this.useDefaultOcrConfigurationCheckBox.isSelected());
        this.localConfigurationOcrTextField.setEnabled(!this.useDefaultOcrConfigurationCheckBox.isSelected());
        this.odForLocalConfigOcrButton.setEnabled(!this.useDefaultOcrConfigurationCheckBox.isSelected());
    }//GEN-LAST:event_useDefaultOcrConfigurationCheckBoxActionPerformed

    private void odForLocalConfigOcrButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odForLocalConfigOcrButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser(dirBase.getAbsolutePath());
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setCurrentDirectory(dirBase.getAbsoluteFile());
        fc.setFileFilter(new FileNameExtensionFilter("json files", "json"));
        int resp = fc.showOpenDialog(this);
        if(resp!=JFileChooser.CANCEL_OPTION){
            dirBase = fc.getSelectedFile().getParentFile();
            localConfigurationOcrTextField.setText(fc.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_odForLocalConfigOcrButtonActionPerformed

    private void ocrApiComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ocrApiComboBoxActionPerformed
        // TODO add your handling code here:
        if(((ComboBoxItem)(this.ocrApiComboBox.getSelectedItem())).getId().equals("qwenAI")){
            this.useDefaultOcrConfigurationCheckBox.setEnabled(true);
            this.localConfigOcrLabel.setEnabled(!this.useDefaultOcrConfigurationCheckBox.isSelected());
            this.localConfigurationOcrTextField.setEnabled(!this.useDefaultOcrConfigurationCheckBox.isSelected());
            this.odForLocalConfigOcrButton.setEnabled(!this.useDefaultOcrConfigurationCheckBox.isSelected());
        }else{
            this.useDefaultOcrConfigurationCheckBox.setEnabled(false);
            this.localConfigOcrLabel.setEnabled(false);
            this.localConfigurationOcrTextField.setEnabled(false);
            this.odForLocalConfigOcrButton.setEnabled(false);
        }
    }//GEN-LAST:event_ocrApiComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImageFilesSelector.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImageFilesSelector.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImageFilesSelector.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageFilesSelector.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame f = new ImageFilesSelector();
                f.setSize(655, 314);
                f.setVisible(true);
            }
        });
    }
    
    protected static ComboBoxModel<ComboBoxItem> createComboboxModelOcrApi(){
        Properties prop = Configuration.loadAndGetConfigProperties();
        String[] values = prop.getProperty("ocrApiForSelection", "NONE,documentAI,QwenAI").split(",");
        DefaultComboBoxModel<ComboBoxItem> m = new DefaultComboBoxModel<>();
        for(String v: values){
            m.addElement(new ComboBoxItem(v));
        }
        return m;
    }

    protected static ComboBoxModel<String> createComboboxModelTeamsForSelecting(){
        Properties prop = Configuration.loadAndGetConfigProperties();
        String[] values = prop.getProperty("teamsForSelecting", "NONE,ARG,BCN,CUB,GRE").split(",");
        return new DefaultComboBoxModel<>(values);
    }

    protected static ComboBoxModel<ComboBoxItem> createComboboxModelNewsPaperForSelecting(){
        Properties prop = Configuration.loadAndGetConfigProperties();
        String[] values = prop.getProperty("newspapersForSlecting", "NONE,db,dm,en,lp,sm").split(",");
        DefaultComboBoxModel<ComboBoxItem> m = new DefaultComboBoxModel<>();
        for(String v: values){
            m.addElement(new ComboBoxItem(v));
        }
        return m;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox AutoDiscardCheckBox;
    private javax.swing.JTextField ImageInputFixOcrTextField;
    private javax.swing.JComboBox<String> commandFixOrderComboBox;
    private javax.swing.JComboBox<String> commandFixingComboBox;
    private javax.swing.JCheckBox deskewCheckBox;
    private javax.swing.JCheckBox dewarpCheckBox;
    private javax.swing.JTextField discardFolderTextField;
    private javax.swing.JLabel doNotFixLabel;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JCheckBox fixbacktransCheckBox;
    private javax.swing.JCheckBox forceRequestCheckBox;
    private javax.swing.JTextField inputExtractDataField;
    private javax.swing.JTextField inputFixImagesTextField;
    private javax.swing.JTextField inputFixOrderTextField;
    private javax.swing.JTextField inputOcerTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel localConfigFixOcrLabel;
    private javax.swing.JLabel localConfigOcrLabel;
    private javax.swing.JTextField localConfigurationFixOcrTextField;
    private javax.swing.JTextField localConfigurationOcrTextField;
    private javax.swing.JComboBox<ComboBoxItem> newsPaperNameExtractDataComboBox;
    private javax.swing.JComboBox<ComboBoxItem> ocrApiComboBox;
    private javax.swing.JButton odForDiscardFolder;
    private javax.swing.JButton odForImageInputFixOcrButton;
    private javax.swing.JButton odForInputExtractDataButton;
    private javax.swing.JButton odForInputFixImagesButton;
    private javax.swing.JButton odForInputFixOrderButton;
    private javax.swing.JButton odForInputOcrButton;
    private javax.swing.JButton odForLocalConfigFixOcrButton;
    private javax.swing.JButton odForLocalConfigOcrButton;
    private javax.swing.JButton odForOutputExtractDataButton;
    private javax.swing.JButton odForOutputFixImagesButton;
    private javax.swing.JButton odForOutputFixOcrButton;
    private javax.swing.JButton odForOutputFixOrderButton;
    private javax.swing.JButton odForOutputOcrButton;
    private javax.swing.JButton odForParserConfigFileButton;
    private javax.swing.JButton odForPropertiesFileButton;
    private javax.swing.JButton odForTextInputFixOcrButton;
    private javax.swing.JTextField outputFixImagesTextField;
    private javax.swing.JTextField outputFixOcrTextField;
    private javax.swing.JTextField outputFixOrderTextField;
    private javax.swing.JTextField outputOcrTextField;
    private javax.swing.JTextField outputSelectExtractDataField;
    private javax.swing.JTextField parserConfigFileTextField;
    private javax.swing.JTextField propertiesFileExtractDataTextField;
    private javax.swing.JCheckBox remoteConfigCheckBox;
    private javax.swing.JButton runExtractDataButton;
    private javax.swing.JButton runFixImagesButton;
    private javax.swing.JButton runFixOcrButton;
    private javax.swing.JButton runFixOrderButton;
    private javax.swing.JButton runOcrButton;
    private javax.swing.JButton runRequestPermisionButton;
    private javax.swing.JComboBox<String> teamComboBoxExtract;
    private javax.swing.JComboBox<String> teamComboBoxFixOcr;
    private javax.swing.JComboBox<String> teamComboBoxOcr;
    private javax.swing.JComboBox<String> teamComboBoxOrder;
    private javax.swing.JComboBox<String> teamComboBoxRequestAccess;
    private javax.swing.JTextField textInputFixOcrTextField;
    private javax.swing.JCheckBox useDefaultFixOcrConfigurationCheckBox;
    private javax.swing.JCheckBox useDefaultOcrConfigurationCheckBox;
    // End of variables declaration//GEN-END:variables

    private void initMoreComponents() {
        commandFixingComboBox.setSelectedIndex(iCommandSelection);
        dirBase = new File("");
//        this.emailTextField.addActionListener((ae) -> {
//            updateRunRequestPermission();
//        });
        this.emailTextField.addFocusListener(new FocusListener(){
            @Override
            public void focusGained(FocusEvent fe) {
            }

            @Override
            public void focusLost(FocusEvent fe) {
                updateRunRequestPermission();
            }
        });
//        this.teamComboBoxRequestAccess.addActionListener((ae) -> {
//            updateRunRequestPermission();
//        });
        updateComponenetsFirst();
        this.jTabbedPane1.setSelectedIndex(1);
    }

    private void updateComponenetsFirst() {
        doNotFixLabel.setText("Use:");
        switch (iCommandSelection) {
            case 0:
                doNotFixLabel.setText("Do not use:");
                dewarpCheckBox.setEnabled(true);
                dewarpCheckBox.setSelected(false);
                deskewCheckBox.setEnabled(true);
                deskewCheckBox.setSelected(false);
                fixbacktransCheckBox.setEnabled(true);
                fixbacktransCheckBox.setSelected(false);
                break;
            case 1:
                dewarpCheckBox.setEnabled(true);
                dewarpCheckBox.setSelected(true);
                deskewCheckBox.setEnabled(true);
                deskewCheckBox.setSelected(true);
                fixbacktransCheckBox.setEnabled(true);
                fixbacktransCheckBox.setSelected(true);
                break;
            case 2:
                //deskew
                dewarpCheckBox.setEnabled(false);
                dewarpCheckBox.setSelected(false);
                deskewCheckBox.setEnabled(false);
                deskewCheckBox.setSelected(true);
                fixbacktransCheckBox.setEnabled(false);
                fixbacktransCheckBox.setSelected(false);
                break;
            case 3:
                //dewarp
                dewarpCheckBox.setEnabled(false);
                dewarpCheckBox.setSelected(true);
                deskewCheckBox.setEnabled(false);
                deskewCheckBox.setSelected(false);
                fixbacktransCheckBox.setEnabled(false);
                fixbacktransCheckBox.setSelected(false);
                break;
            default:
                dewarpCheckBox.setEnabled(false);
                dewarpCheckBox.setSelected(false);
                deskewCheckBox.setEnabled(false);
                deskewCheckBox.setSelected(false);
                fixbacktransCheckBox.setEnabled(false);
                fixbacktransCheckBox.setSelected(true);
                break;
        }
    }
    
    private void updateRunRequestPermission(){
        boolean enabled = false;
        if(this.teamComboBoxRequestAccess.getSelectedItem().toString().equals("NONE")){
            enabled = false;
        }else{
            enabled = true;
        }
        if(this.emailTextField.getText().trim().isEmpty()){
            enabled = false;
        }else{
            enabled = enabled && true;
        }
        this.runRequestPermisionButton.setEnabled(enabled);        
    }

    private void updateFixOrderStates() {
         if(this.commandFixOrderComboBox.getSelectedItem().toString().equals("Arcanum") 
                && this.teamComboBoxOrder.getSelectedItem().toString().equals("NONE")){
            this.runFixOrderButton.setEnabled(false);
        }else{
            this.runFixOrderButton.setEnabled(true);
        }        
    }
    
    private static class ComboBoxItem{
        private String id;
        private String desc;

        public ComboBoxItem(String string) {
            String[] avalue = string.split(":");
            id=avalue[0];
            if(avalue.length==1){
                desc=avalue[0];
            }else{
                desc=avalue[1];
            }
        }
        
        public ComboBoxItem(String id, String desc) {
            this.id = id;
            this.desc = desc;
        }

        @Override
        public String toString() {
            return desc;
        }

        public String getId() {
            return id;
        }
    }
}
